/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   trie                                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ldutriez <ldutriez@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/08/16 10:53:07 by ldutriez          #+#    #+#             */
/*   Updated: 2022/08/26 11:10:18 by ldutriez         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once

#include <iostream>
#include <iterator>

namespace ldtrie
{
	bool is_only_alpha(const std::string &str)
	{
		for (char c : str)
			if (isalpha(c) == false)
				return false;
		return true;
	}
}

//TODO: Add iterator's tools like range and arithmetical operators.'
//?Maybe clean and split in multiple files.
//TODO: Add constructor parameter to give a "Base" to work on.

/**
** @brief Implementation of Trie structure in c++
**/
class trie
{
	private:

		class node 
		{
			public:
				node(node *previous = nullptr): is_word(false), value('\0'), prev(previous) {
					for (int i = 0; i < 26; i++)
						next[i] = nullptr;
				}
				node(const node & to_copy): is_word(to_copy.is_word)
				{
					*this = to_copy;
				}
				~node() {
					for (int i = 0; i < 26; i++)
						delete next[i];
				}
				node & operator=(const node & to_assign)
				{
					if (this != &to_assign)
					{
						is_word = to_assign.is_word;
						for (int i = 0; i < 26; i++)
							if (to_assign.next[i] != nullptr)
							{
								next[i] = new node;
								*next[i] = *to_assign.next[i];
								next[i]->value = to_assign.value;
								next[i]->prev = this;
							}
					}
					return *this;
				}
				bool is_word;
				char value;
				node *prev;
				node *next[26]; //TODO: make the next a dynamic value.
		};

	public:

		struct const_trie_iterator
		{
			using iterator_category	= std::bidirectional_iterator_tag;
			using difference_type	= std::ptrdiff_t;
			using trie_type			= trie::node*;
			using value_type		= const std::string;
			using pointer			= const std::string*;
			using reference			= const std::string&;

			const_trie_iterator(trie * enclosing_trie, trie_type ptr)
			: _trie(enclosing_trie), _ptr(ptr), _word(_trie->_get_word(_ptr))
			{}

			const_trie_iterator(const const_trie_iterator &to_copy)
			: _trie(to_copy._trie), _ptr(to_copy._ptr), _word(to_copy._word)
			{}

			~const_trie_iterator() {}

			const_trie_iterator & operator=(const const_trie_iterator &to_assign)
			{
				if (this != &to_assign)
				{
					_trie = to_assign._trie;
					_ptr = to_assign._ptr;
				}
				return *this;
			}

			reference operator*() const
			{
				return _word;
			}
			pointer operator->()
			{
				return &_word;
			}

			const_trie_iterator & operator++()
			{
				bool is_word(false);
				char tmp_c;

				while (is_word == false && _ptr->prev != nullptr)
				{
					if (_ptr->prev->is_word == true)
					{
						_ptr = _ptr->prev;
						_word = _trie->_get_word(_ptr);
						is_word = true;
						return *this;
					}
					else
					{
						tmp_c = _ptr->value;
						for (int c(tmp_c + 1 - 'A'); c < 26; ++c)
						{
							if (_ptr->prev->next[c] != nullptr)
							{
								_ptr = _ptr->prev->next[c];
								while (is_word == false)
								{
									if (_ptr->is_word == true)
									{
										_word = _trie->_get_word(_ptr);
										is_word = true;
										return *this;
									}
									for (int c(0); c < 26; ++c)
									{
										if (_ptr->next[c] != nullptr)
										{
											_ptr = _ptr->next[c];
											break;
										}
									}
								}
							}
						}
					}
					_ptr = _ptr->prev;
				}
				_word.clear();
				_ptr = nullptr;
				return *this;
			}
			const_trie_iterator operator++(int)
			{
				const_trie_iterator tmp(*this);
				++*this;
				return tmp;
			}

			const_trie_iterator & operator--()
			{
				bool is_word(false);
				char tmp_c;

				while (is_word == false && _ptr->prev != nullptr)
				{
					if (_ptr->prev->is_word == true)
					{
						_ptr = _ptr->prev;
						_word = _trie->_get_word(_ptr);
						is_word = true;
						return *this;
					}
					else
					{
						tmp_c = _ptr->value;
						for (int c(tmp_c - 1 - 'A'); c >= 0; --c)
						{
							if (_ptr->prev->next[c] != nullptr)
							{
								_ptr = _ptr->prev->next[c];
								while (is_word == false)
								{
									if (_ptr->is_word == true)
									{
										_word = _trie->_get_word(_ptr);
										is_word = true;
										return *this;
									}
									for (int c(25); c >= 0; --c)
									{
										if (_ptr->next[c] != nullptr)
										{
											_ptr = _ptr->next[c];
											break;
										}
									}
								}
							}
						}
					}
					_ptr = _ptr->prev;
				}
				_word.clear();
				_ptr = nullptr;
				return *this;
			}
			const_trie_iterator operator--(int)
			{
				const_trie_iterator tmp(*this);
				--*this;
				return tmp;
			}

			friend bool operator==(const const_trie_iterator & a, const const_trie_iterator & b) { return a._ptr == b._ptr; };

			private:
				trie		*_trie;
				trie_type	_ptr;
				std::string	_word;
		};

		typedef node				value_type;
		typedef node*				pointer;
		typedef const node*			const_pointer;
		typedef node&				reference;
		typedef const node&			const_reference;
		typedef const_trie_iterator const_iterator;

		trie()
		: _root(new node), _size(0)
		{}
		
		trie(const trie &to_copy)
		: _root(new node), _size(to_copy._size)
		{
			*_root = *to_copy._root;
		}
		
		~trie() {
			delete _root;
		}

		trie & operator=(const trie & to_assign)
		{
			if (this != &to_assign)
			{
				*_root = *to_assign._root;
				_size = to_assign._size;
			}
			return *this;
		}

		size_t	size(void) const { return _size; }

		const_iterator cbegin()
		{
			pointer current = _root;

			for (int i(0); i < 26; ++i)
				if (current->next[i] != nullptr)
				{
					current = current->next[i];
					if (current->is_word == true)
						return const_iterator(this, current);
					i = -1;
				}
			return const_iterator(this, nullptr);
		}
		const_iterator clast()
		{
			pointer current = _root;

			for (int i(25); i >= 0; --i)
				if (current->next[i] != nullptr)
				{
					current = current->next[i];
					if (current->is_word == true)
						return const_iterator(this, current);
					i = 26;
				}
			return const_iterator(this, nullptr);
		}
		const_iterator cend()
		{
			return const_iterator(this, nullptr);
		}
		
		bool insert(const std::string &word)
		{
			node *current = _root;

			if (ldtrie::is_only_alpha(word) == false)
				return false;
			for (auto c : word)
			{
				c = toupper(c);
				if (current->next[c - 'A'] == nullptr)
					current->next[c - 'A'] = new node(current);
				current = current->next[c - 'A'];
				current->value = c;
			}
			if (current->is_word == false)
			{
				++_size;
				current->is_word = true;
			}
			return true;
		}

		/**
		 * @brief Search for a given word and erase it from the trie.
		 * Delete every letters that are not part of a common prefix.
		 *
		 * @param to_erase The word to erase from the trie.
		 * @return Return true if the word is not in the trie after this function.
		 * False in case of bad entry.
		 */
		bool erase(const std::string & to_erase)
		{
			if (ldtrie::is_only_alpha(to_erase) == false)
				return false;
			_erase(_root, to_erase);
			return true;
		}

		bool search(const std::string &word) {
			node *current = _root;

			if (ldtrie::is_only_alpha(word) == false)
				return false;
			for (auto c : word)
			{
				c = toupper(c);
				if (current->next[c - 'A'] == nullptr)
					return false;
				current = current->next[c - 'A'];
			}
			return current->is_word;
		}

		/**
		 * @brief Print every word in alphabetical order
		 * starting from the given prefix. If none given, print all words.
		 * Only a debug function to print in cout.
		 */
		bool print(std::string prefix = "")
		{
			if (ldtrie::is_only_alpha(prefix) == false)
				return false;
			if (prefix == "")
				_print(_root, "");
			else
			{
				node *current = _root;
				for (char &c : prefix) {
					c = toupper(c);
					if (current->next[c - 'A'] == nullptr)
						return false;
					current = current->next[c - 'A'];
				}
				_print(current, prefix); //TODO Need to return _print().
			}
			return true;
		}

	private:

		/**
		 * @brief Tell if a node is a word or part of one.
		 * 
		 * @param current The node to check.
		 * @return true if current is a word or a prefix
		 */
		bool _is_prefix(node *current)
		{
			if (current->is_word == true)
				return true;
			bool is_prefix(false);
			for (int i(0); i < 26; ++i)
				if (current->next[i] != nullptr)
					is_prefix = true;
			return is_prefix;
		}

		void _erase(node *current, std::string to_erase)
		{
			if (to_erase.empty() == true)
			{
				if (current->is_word == true)
				{
					--_size;
					current->is_word = false;
				}
				return ;
			}
			char next_c = to_erase.front();
			next_c = toupper(next_c);
			if (current->next[next_c - 'A'] == nullptr)
				return ;
			_erase(current->next[next_c - 'A'], to_erase.substr(1));
			if (_is_prefix(current->next[next_c - 'A']) == false)
				delete current->next[next_c - 'A'];
			return ;
		}

		std::string	_get_word(node * end_of_word)
		{
			std::string result;
			if (end_of_word == nullptr)
				return result;
			while (end_of_word->prev != nullptr)
			{
				result.insert(0, 1, end_of_word->value);
				end_of_word = end_of_word->prev;
			}
			return result;
		}

		/**
		 * @brief Print every word starting from the given node
		 * Only a debug function to print in cout.
		 * 
		 * @param current 
		 */
		void _print(node *current, std::string prefix)
		{
			if (current == nullptr)
				return ;
			if (current->is_word)
				std::cout << prefix << std::endl;
			for (int i = 0; i < 26; i++)
				if (current->next[i] != nullptr)
				{
					prefix += char(i + 'A');
					_print(current->next[i], prefix);
					prefix.pop_back();
				}
		}
		
		node 		*_root;
		size_t		_size;
};

bool operator!=(const trie::const_iterator & a, const trie::const_iterator & b) { return !(a == b); };
